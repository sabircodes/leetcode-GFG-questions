
//IMAGINE NEIGHBOURS  LIKE THIS
//[-1,-1]     [-1,0]   [-1,1]
//[0,-1] -->  [0,0]<--   [0,1]
//[1,-1]      [1,0]     [1,1]
//Here [0,0] is the first index of 2D matrix and all the other index are its neighbours 
//the live function count number of 1 in the neighbours

//code::
class Solution {
public:
   
    
    int neighbor(vector<vector<int>> &board, int r, int c){
    if( r < 0 || r >= board.size() || c < 0 || c >= board[0].size() || board[r][c] == 0 ){ return 0; }                          // out of bound cases
    return 1;}
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>>temp = board;
        int rows = board.size();
        int col = board[0].size();
        for(int r = 0 ; r < rows ; r++){
            for(int c =  0 ; c < col ; c++){
                int live = neighbor(board, r-1, c-1) + neighbor(board, r-1, c) + neighbor(board, r-1, c+1) + neighbor(board, r, c+1) + neighbor(board, r+1, c+1) + neighbor(board, r+1, c) + neighbor(board, r+1, c-1) + neighbor(board, r, c-1);
                //cout<<"Ceil : "<<r<<" "<<c <<" "<<"live neighbors : "<<live;
            
            if(board[r][c]==1){
                temp[r][c] = (live<2 || live>3)? 0 : 1;
            }
            else{
                temp[r][c] = (live==3) ?1:0;
            }
        }
        }
        
        
        for(int i = 0 ; i < rows ; i++){
            board[i] = temp[i];
        }
     //DRY RUN :
//Ceil : 0 0 live neighbors : 1 
//Ceil : 0 1 live neighbors : 1
//Ceil : 0 2 live neighbors : 2
//Ceil : 1 0 live neighbors : 3
//Ceil : 1 1 live neighbors : 5
//Ceil : 1 2 live neighbors : 3
//Ceil : 2 0 live neighbors : 1
//Ceil : 2 1 live neighbors : 3
//Ceil : 2 2 live neighbors : 2
//Ceil : 3 0 live neighbors : 2
//Ceil : 3 1 live neighbors : 3
//Ceil : 3 2 live neighbors : 2
      
      
      
      
      
      
      
        
    }
    
};
