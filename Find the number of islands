//Given a grid of size n*m (n is number of rows and m is number of columns grid has) consisting of '0's(Water) and '1's(Land). Find the number of islands.
//Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.

ANS:: 





//all the 8 direction of a respective coordinate
    //[-1,-1]     [-1,0]   [-1,1]
    //[0,-1] -->  [0,0]<--   [0,1]
    //[1,-1]      [1,0]     [1,1]
    void dfs(vector<vector<char>>& grid, vector<vector<bool>>&vis , int i , int j , int n , int m ){
        // if(i<0 || i>= n || j<0 || j>= m || vis[i][j]==true || grid[i][j]=='0'){
        //     return;
        // }
        if(i<0 || j<0 || i>=n || j>=m || grid[i][j]=='0' || vis[i][j]==true) return;
        vis[i][j]=true;
        dfs(grid,vis,i-1,j-1,n,m);
        dfs(grid,vis,i-1,j,n,m);
        dfs(grid,vis,i-1,j+1,n,m);
        dfs(grid,vis,i,j+1,n,m);
        dfs(grid,vis,i+1,j+1,n,m);
        dfs(grid,vis,i+1,j+0,n,m);
        dfs(grid,vis,i+1,j-1,n,m);
        dfs(grid,vis,i,j-1,n,m);
     

    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n = grid.size();
        int  m = grid[0].size();
        int count = 0 ;
        int mx = 0 ;
      vector<vector<bool>>vis(n,vector<bool>(m,false));
        for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
          
                        if(grid[i][j]=='1'&& !vis[i][j]){
                            dfs(grid,vis,i,j,n,m);
                            count++;
                            
                        }
       
        }
    }
    return count;
    }
};
 
